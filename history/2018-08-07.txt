Python 180

Remember, statements are instructions that perform some action but don’t
evaluate to a value like expressions do. You’ve already seen the assignment
statement, which stores a value in a variable

День раз.
                    Вообще-то я уже пару дней интересовался языком.
                    Плюс - я немного знаю С.
                    Буду использовать только официальный сайт :)
                    
----------    Помощь
Официальный сайт:
    https://www.python.org/doc/
    https://wiki.python.org/moin/PythonBooks
    https://wiki.python.org/moin/BeginnersGuide/Programmers

    очень интересно и познавательно http://inventwithpython.com/cracking/
    Этим в общем-то и занимался целый вечер
    
pip3 list - список установленных модулей
сам интерпретатор в интерактивном режиме
                    
----------    Литералы.

Целые числа
12, 134, 
Кстати число ограничено только размером доступной памяти.

Числа с плавающей точкой (floating-point numbers)
12.23 0.45 .45 12E-3 12e2

Строки (см Strings)
' '
" "
""" """

----------    Переменные.

Имена
Язык чуствителен к регистру символов:
spam Spam SsPam - рассматриваются как три разные переменнные

Объявление
Объявляются перед использованием:

spam

В языке динамическя типизация данных переменная может иметь значение число,
затем строку, затем...

spam = 42
spam = 'Spam'
spam = 42.32

Значения не изменяются, но не стоит об этом беспокоится - это внутренняя кухня.
Так ли Это.
Говоря по другому, нет надобности явно указывать на каккой тип данных ссылается
переменная.

Присваивание

a = 32
b = 2
a = b

А это интересней
a, b = 0, 1     (a = 0, b = 1)
a, b = b, a+b   (a = 1, b = 1)
a, b = b, a+b   (a = 1, b = 2)

Если переменная не определена (значение не присвоено), её использование
вызывает ошибку :

    >>> n
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'n' is not defined

----------    Комментарии.

# однострочный комментарий

# this is the first comment
spam = 1 # and this is the second comment
# ... and now a third!
text = "# This is not a comment because it's inside quotes."

"""
   Многострочный
     комментарий
    """
    
----------    Простые типы данных

Язык полностью поддерживает числа сплавающей точкой (floating point)
В выражения где используются вместе целые и вещественные - целые приводятся
к вещественному типу и результат число с плавающей точкой:

>>> 4*3.75 - 1
14.0

Кроме типов int и float, Python другие типы данных, такие как Decimal и Fraction.
В язык встроена поддержка комплексных чисел, and uses the j or J suffix to
indicate the imaginary part (e.g. 3+5j).

----------    Арифметические операции

Since ** has higher precedence than -, -3**2 will be interpreted as -(3**2) and thus result in -9. To avoid this and get
9, you can use (-3)**2.

----------    Strings

Использование строк в Python. Строки могут быть заключены в одинарные (апостроф)
или двойные кавычки. Разница только в том, что в одинарных можно использовать
" без  \ , а в двойных '
____________________________
Two or more string literals (i.e. the ones enclosed between quotes) next to
each other are automatically
concatenated.
>>> 'Py' 'thon'
'Python'
This feature is particularly useful when you want to break long strings:

>>> text = ('Put several strings within parentheses '
...
'to have them joined together.')
>>> text
'Put several strings within parentheses to have them joined together.'

This only works with two literals though, not with variables or expressions:
>>> prefix = 'Py'
>>> prefix 'thon' # can't concatenate a variable and a string literal
...
SyntaxError: invalid syntax
>>> ('un' * 3) 'ium'
...
SyntaxError: invalid syntax
If you want to concatenate variables or a variable and a literal, use +:
>>> prefix + 'thon'
'Pytho
_________________________________________

-----
In the interactive interpreter, the output string is enclosed in quotes
and special characters are escaped with
backslashes. While this might sometimes look different from the input
(the enclosing quotes could change),
the two strings are equivalent. The string is enclosed in double quotes if
the string contains a single quote
and no double quotes, otherwise it is enclosed in single quotes. The print()
function produces a more
readable output, by omitting the enclosing quotes and by printing escaped and
special characters:
>>> '"Isn\'t," they said.'
'"Isn\'t," they said.'
>>> print('"Isn\'t," they said.')
"Isn't," they said.
>>> s = 'First line.\nSecond line.' # \n means newline
>>> s # without print(), \n is included in the output
'First line.\nSecond line.'
>>> print(s) # with print(), \n produces a new line
First line.
Second line.

2 Unlike other languages, special characters such as \n have the same meaning
with both single ('...') and double ("...")
quotes. The only difference between the two is that within single quotes you
don’t need to escape " (but you have to escape
\') and vice versa.
-----
If you don’t want characters prefaced by \ to be interpreted as special characters,
you can use raw strings
by adding an r before the first quote:
>>> print('C:\some\name') # here \n means newline!
C:\some
ame
>>> print(r'C:\some\name') # note the r before the quote
C:\some\name
----
String literals can span multiple lines. One way is using triple-quotes: """..."""
 or '''...'''. End of
lines are automatically included in the string, but it’s possible to prevent
this by adding a \ at the end of
the line. The following example:
-----
print("""\
Usage: thingy [OPTIONS]
-h
-H hostname
""")
Display this usage message
Hostname to connect to
produces the following output (note that the initial newline is not included):
Usage: thingy [OPTIONS]
-h
-H hostname
Display this usage message
Hostname to connect to

Strings can be concatenated (glued together) with the + operator, and repeated
with *:
>>> # 3 times 'un', followed by 'ium'
>>> 3 * 'un' + 'ium'
'unununium'

-----
Strings can be indexed (subscripted), with the first character having index 0.
There is no separate character
type; a character is simply a string of size one:
>>> word = 'Python'
>>> word[0] # character in position 0
'P'
>>> word[5] # character in position 5
'n'
------
Indices may also be negative numbers, to start counting from the right
>>> word[-1]
'n'
>>> word[-2]
'o'
>>> word[-6]
'P'
# last character
# second-last character
Note that since -0 is the same as 0, negative indices start from -1.
In addition to indexing, slicing is also supported. While indexing is used to obtain individual characters,
slicing allows you to obtain substring:
>>> word[0:2]
'Py'
>>> word[2:5]
'tho'
# characters from position 0 (included) to 2 (excluded)
# characters from position 2 (included) to 5 (excluded)
Note how the start is always included, and the end always excluded. This makes sure that s[:i] + s[i:]
is always equal to s:
>>> word[:2] + word[2:]
'Python'
>>> word[:4] + word[4:]
'Python'
Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults
to the size of the string being sliced.
>>> word[:2]
'Py'
>>> word[4:]
'on'
>>> word[-2:]
'on'
# character from the beginning to position 2 (excluded)
# characters from position 4 (included) to the end
# characters from the second-last (included) to the end
One way to remember how slices work is to think of the indices as pointing between characters, with the left
edge of the first character numbered 0. Then the right edge of the last character of a string of n characters
has index n, for example:
+---+---+---+---+---+---+
| P | y | t | h | o | n |
+---+---+---+---+---+---+
0   1   2   3   4   5   6
-6 -5  -4  -3  -2  -1

The first row of numbers gives the position of the indices 0...6 in the string; the second row gives the
corresponding negative indices. The slice from i to j consists of all characters between the edges labeled i
and j, respectively.
For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds. For
example, the length of word[1:3] is 2.
Attempting to use an index that is too large will result in an error:

However, out of range slice indexes are handled gracefully when used for slicing:
>>> word[4:42]
'on'
>>> word[42:]
''
Python strings cannot be changed — they are immutable. Therefore, assigning to an indexed position in the
string results in an error:
>>> word[0] = 'J'
...
TypeError: 'str' object does not support item assignment
>>> word[2:] = 'py'
...
TypeError: 'str' object does not support item assignment
If you need a different string, you should create a new one:
>>> 'J' + word[1:]
'Jython'
>>> word[:2] + 'py'
'Pypy'
The built-in function len() returns the length of a string:
>>> s = 'supercalifragilisticexpialidocious'
>>> len(s)
34

Escape character   What is actually printed

\\  Backslash (\)
\'  Single quote (')
\"  Double quote (")
\n  Newline
\t  Tab

See also:
textseq Strings are examples of sequence types, and support the common operations supported by such
types.
string-methods Strings support a large number of methods for basic transformations and searching.
f-strings String literals that have embedded expressions.
formatstrings Information about string formatting with str.format().
old-string-formatting The old formatting operations invoked when strings are the left operand of the %
operator are described in more detail here.
See also:
textseq Strings are examples of sequence types, and support the common operations supported by such
types.
string-methods Strings support a large number of methods for basic transformations and searching.
f-strings String literals that have embedded expressions.
formatstrings Information about string formatting with str.format().
old-string-formatting The old formatting operations invoked when strings are the left operand of the %
operator are described in more detail here.

Litreture:
    Официальная документация "Python Tutorial Release 3.7.0"
